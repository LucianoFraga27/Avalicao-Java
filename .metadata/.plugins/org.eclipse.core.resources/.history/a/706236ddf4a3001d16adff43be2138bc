package com.attornatus.project.api.exceptionhandler;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@ControllerAdvice
public class ApiExceptionHandler extends ResponseEntityExceptionHandler {

	private MessageSource messageSource;

	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {

		List<EstruturaDosErros.CamposErrados> campos = new ArrayList<>();

		for (ObjectError objectError : ex.getBindingResult().getAllErrors()) {

			String nome = ((FieldError) objectError).getField();

			String mensagem = messageSource.getMessage(objectError, LocaleContextHolder.getLocale());

			campos.add(new EstruturaDosErros.CamposErrados(nome, mensagem));
		}

		EstruturaDosErros erro = new EstruturaDosErros();
		erro.setStatus(status.value());
		erro.setMomento(LocalDateTime.now());
		erro.setTitulo("Um ou mais campos estão inválidos!");
		erro.setCampos(campos);

		return handleExceptionInternal(ex, erro, headers, status, request);
	}

}
