package com.attornatus.project.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.attornatus.project.domain.model.Pessoa;
import com.attornatus.project.domain.repository.PessoaRepository;
import com.attornatus.project.domain.service.CadastroPessoaService;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping("/pessoas")
public class PessoaController {

	private PessoaRepository repository;
	private CadastroPessoaService service;
	
	
	// Listando pessoas
	@GetMapping
	public List<Pessoa> listar(){
		return repository.findAll();
	}
	
	
	// Adicionando pessoas
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Pessoa adicionar(@RequestBody Pessoa pessoa) {
		return service.salvar(pessoa);
	}

	
	// Encontrando pessoas
	@GetMapping("/{id}")	// por Id
	public ResponseEntity<Pessoa> buscar(@PathVariable Long id){
		return repository.findById(id)
						 .map(pessoa -> ResponseEntity.ok(pessoa))
						 .orElse(ResponseEntity.notFound().build());
	}
		
	@GetMapping("/{nome}") // por nome
	public List<Pessoa> encontrarPorNome(@PathVariable String nome){
		return repository.findByNome(nome);
	}
	
	@GetMapping("/{string}") // por string no nome
	public List<Pessoa> encontrarPorStringNoNome(@PathVariable String string){
		return repository.findByNomeContaining(string);
	}
	
	// Editando pessoas
	@PutMapping("/{id}")
	public ResponseEntity<Pessoa> atualizar(@PathVariable Long id, @RequestBody Pessoa pessoa){
		if(!repository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		pessoa.setId(id);
		pessoa = service.salvar(pessoa);
		return ResponseEntity.noContent().build();
	}
	
	
	// Excluindo pessoas
	@DeleteMapping("/{id}")
	public ResponseEntity<Void> remover(@PathVariable Long id) {
		if (!repository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		service.excluir(id);
		return ResponseEntity.noContent().build();
	}
	
	
	
	
}
