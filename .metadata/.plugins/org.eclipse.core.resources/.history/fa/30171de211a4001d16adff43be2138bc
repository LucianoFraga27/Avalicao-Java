package com.attornatus.project.api.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.attornatus.project.domain.model.Endereco;
import com.attornatus.project.domain.model.Pessoa;
import com.attornatus.project.domain.repository.EnderecoRepository;
import com.attornatus.project.domain.service.CadastroEnderecoService;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping("/enderecos")
public class EnderecoController {

	private EnderecoRepository repository;
	private CadastroEnderecoService service;

	@GetMapping
	public List<Endereco> listar() {
		return repository.findAll();
	}

	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Endereco criarEndreco(@Valid @RequestBody Endereco endereco) {
		return service.cadastrar(endereco);
	}
	
	// Editando pessoas
		@PutMapping("/{id}")
		public ResponseEntity<Pessoa> atualizar(@PathVariable Long id, @Valid @RequestBody Pessoa pessoa) {
			if (!repository.existsById(id)) {
				return ResponseEntity.notFound().build();
			}
			pessoa.setId(id);
			pessoa = service.salvar(pessoa);
			return ResponseEntity.noContent().build();
		}

	
	// Encontrando enderecos das pessoas por id
	@GetMapping("/todos/{id}") // por Id
	public List<Endereco> buscarEnderecos(@PathVariable Long id) {
		return repository.findAllByPessoaId(id);
	}

}
